@startuml
GameState o-- Map
GameState o-- Logic
GameState o-- Player
MapReader - Map : reads >
Map o-- GameField
GameField o-- Building
GameField o-- Unit
Unit o-- Position
Player o-- Unit
Player <|-- ComputerPlayer


class GameState {
      -Map map
      -Logic logic
      -List<Player> players
      -Integer turns
      +Integer getTurns()
      +void advanceTurn()
      +void advancePlayer()
      +Map getMap()
      +void attack(Unit, Unit)
      +void play()
      -void updateBuildingCaptureCounters()
      -void removeUnitIfDead(Unit)
      
}

class Map {
      -GameField[][] fields
      +GameField getField(Position)
      +Boolean isInsantiated()
      +Boolean isValidField(Integer, Integer)
      +Boolean isValidField(Position)
}

class Position {
      -Pair<Integer, Integer> pair
      +Integer getX()
      +Integer getY()
}

class MapReader {
      +Map readMap(File)
}

abstract class Unit {	 
      -Double health
      -Double maxHealth
      -Integer attack
      -Integer meleeDefense
      -Integer rangeDefense
      -Postition position
      -Player owner
      -String name
      -Integer movement
      -Integer maxMovement
      -Boolean hasFinishedTurn
      +Boolean isDead()
      +Integer getHealth()
      +Integer getMaxHealth()
      +Integer getAttack()
      +Integer getRemainingMovement()			 	 
      +Integer getMaxMovement()			 	 
      +Integer getMeleeDefense()
      +Integer getRangeDefense()
      +Player getOwner()
      +void setOwner
      +Position getPosition()
      +void setPosition(Position)
      +void restortHealth(Double)
      +void reduceHealth(Double)
      +Boolean hasFinishedTurn()
      +Boolean canMoveTo(Position)
      +Boolean isRanged()
}


class Player {
      -String name
      -Color color
      -boolean playerOwned
      -List<Unit> unitsOwned
      +boolean isHumanPlayer()
      +String getName()
      +boolean hasLost()
      +boolean hasMoveableUnits()
}

class ComputerPlayer {
      +void takeTurn()
}

abstract class Building {
      -Integer captureDifficulty
      -Integer remainingCaptureTime
      -DoubleattackBonus
      -DoubledefenseBonus
      -Player ownedByPlayer
      -boolean goalBuilding
      +DoublegetAttackBonus()
      +DoublegetDefenseBonus()
      +Integer getRemainingCaptureTime()
      +Integer setOwner(Player)
      +boolean isGoalBuilding()      
}

abstract class GameField {
      -Unit unitStanding
      -Building hostedBuilding
      -DoublemovementModifier
      +DoublegetAttackModifier()
      +DoublegetMovementModifier()
      +boolean doesAcceptUnit(? extends Unit)
      +boolean isOccupied()
      +Unit getUnit()
      +Building getBuilding()
      +Unit setUnit()
}

abstract class RangedUnit<? extends Unit> {
      +DoublegetMinRange()
      +DoublegetMaxRange()
}

hide empty members

@enduml