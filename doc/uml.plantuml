@startuml
GameState o-- Map
GameState o-- Logic
GameState o-- Player
Building o-- Player
MapReader - Map : reads >
Map o-- GameField
Map <|.. java.lang.Iterable
Logic <|.. java.util.Comparator
GameField o-- Building
GameField o-- Unit
Position o-- Pair
Unit o-- Position
Unit o-- Player
Player o-- Unit
Player <|-- ComputerPlayer
Unit <|-- RangedUnit
RangedUnit <|-- Dragon
Unit <|-- Soldier
GameField <|-- Grass
GameField <|-- Water
GameField <|-- Pit


class GameState {
      -GameMap map
      -Logic logic
      -List<Player> players
      -Integer turns
      +Integer getTurns()
      +GameState GameState(GameMap, Logic, List<Player>)
      +void advanceTurn()
      +void advancePlayer()
      +GameMap getMap()
      +void attack(Unit, Unit)
      +Boolean move(Unit, Position)
      +void play()
      +List<Player> getPlayers()
      +Boolean produceUnit(GameField, String)
      -void updateBuildingCaptureCounters()
      -Boolean removeUnitIfDead(Unit)
      
}

class Map {
      -GameField[][] fields
      +GameField getField(Position)
      +Boolean isInsantiated()
      +Boolean isValidField(Integer, Integer)
      +Boolean isValidField(Position)
}

namespace java.util #DDDDDD {
      interface Comparator<T> {
            +int compare(T, T)
      }     
}


namespace java.lang #DDDDDD {
      interface Iterable<T> {
            +Iterator<T> iterator()
      }	    
}

class Position {
      -Pair<Integer, Integer> pair
      +Integer getX()
      +Integer getY()
}

class MapReader {
      +Map readMap(File)
}

class Pair {
      -L left
      -R right
      +Pair<L, R>
      +L getLeft()
      +R getRight()
}

abstract class Unit {	 
      -Double health
      -Double maxHealth
      -Integer attack
      -Integer meleeDefense
      -Integer rangeDefense
      -Postition position
      -Player owner
      -String name
      -Integer movement
      -Integer maxMovement
      -Boolean hasFinishedTurn
      +Boolean isDead()
      +Integer getHealth()
      +Integer getMaxHealth()
      +Integer getAttack()
      +Integer getRemainingMovement()			 	 
      +Integer getMaxMovement()			 	 
      +Integer getMeleeDefense()
      +Integer getRangeDefense()
      +Player getOwner()
      +void setOwner
      +Position getPosition()
      +void setPosition(Position)
      +void restortHealth(Double)
      +void reduceHealth(Double)
      +Boolean hasFinishedTurn()
      +Boolean canMoveTo(Position)
      +Boolean isRanged()
}

class Logic {
      +List<Position> findPath(Map, Unit, Position)
      +Pair<Double, Double> calculateDamage(Map, Unit, Unit)
      +Double calculateCounterDamage(Map, Unit, Unit)
      -Double calculateTheoreticalCounterDamage(Map, Unit, Unit, Double)
      -List<Position> AStar(Map, Unit, Position)
      -List<Position> getAdjacentPositions(Position)
      -class AStarComparator
      -Double getMovementCost(Map, Unit, Position)
      +Set<Position> getAttackableUnitPositions(Map, Unit)
      -Set<Position> getAttackableFields(Map, Unit)
      -Set<Position> getPositionsInRange(Map, Position, Double)
      -Integer getManhattanDistance(Position, Position)
      -Pair<Integer, Integer> getDistanceAway(Position, Position)
      
}

class Player {
      -String name
      -Color color
      -Boolean playerOwned
      -List<Unit> unitsOwned
      +Boolean isHumanPlayer()
      +String getName()
      +Boolean hasLost()
      +Boolean hasMoveableUnits()
      +void removeUnit(unit)
}

class ComputerPlayer {
      +void takeTurn()
}

abstract class Building {
      -String buildingName
      -Integer captureDifficulty
      -Integer remainingCaptureTime
      -Double attackBonus
      -Double defenseBonus
      -Player owner
      -Player lastCapturer
      -Boolean goalBuilding
      +Double getAttackBonus()
      +Double getDefenseBonus()
      +Player getLastCapturer()
      +void setLastCapturer()
      +Player getOwner()
      +String getName()
      +Boolean hasOwner()
      +void reduceCaptureTime(Integer)
      +void resetCaptureTime()
      +Integer getCaptureDifficulty()
      +Integer getRemainingCaptureTime()
      +Integer setOwner(Player)
      +Boolean isGoalBuilding()      
}

abstract class GameField {
      -String fieldName
      -Unit hostedUnit
      -Building hostedBuilding
      -Double movementModifier
      -Double defenseModifier
      -Double attackModifier
      +Double getAttackModifier()
      +Double getMovementModifier()
      +Boolean hostsUnit()
      +Boolean hostsBuilding()
      +Unit getUnit()
      +Building getBuilding()
      +Unit setUnit()
      +Building setBuilding()
}

abstract class RangedUnit {
      +Double getMinRange()
      +Double getMaxRange()
}

class Dragon {
}

class Soldier {
}

class Grass {
}

class Pit {
}

class Water {
}

hide empty members

@enduml